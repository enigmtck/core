# ACME_PROXY controls the activation of the proxy Fairing that handles automatic TLS
# certificate deployment using Certbot. With this enabled, the server will attempt
# to automatically retrieve a TLS certificate from Let's Encrypt as soon as it's
# started and will cache the data to handle TLS traffic transparently to Rocket.
#
# For this to work properly, the SERVER_NAME must be set to a DNS name that will reach
# your server on port 443/tcp. This could be via a directly assigned public address
# on this server listening on port 443/tcp (set via ACME_PROXY_PORT). Or it could be
# via a destination NAT address handled by your router that forwards the traffic from
# port 443/tcp to whatever port you set in ACME_PROXY_PORT on the server's local
# address.

ACME_PROXY=true

# ACME_PORT is the port that the ACME TLS proxy will listen on. Unless NAT is involved,
# this should be 443. To allow Rocket to run unpriveleged, it may make sense to move
# this to another port and set up NAT from port 443/tcp elsewhere specifically to allow
# for unprivileged operation.

ACME_PORT=443

# ACME_EMAILS is the email address that will be sent to Let's Encrypt when setting up a
# certificate. This does not have to match the INSTANCE_CONTACT email address.

ACME_EMAILS='["email@example.com"]'


# ROCKET_PORT is the HTTP port that the backend service will listen on.
# This port should not be exposed to the Internet

ROCKET_PORT=8000

# ROCKET_ADDRESS is the interface address that the backend service will listen on.
# In a locally proxied environment, this should be 127.0.0.1. In an environment where
# a separate service (like nginx or Caddy) is passing data to Rocket, it may be set
# to a specific interface or all interfaces (0.0.0.0).

ROCKET_ADDRESS=127.0.0.1

# ROCKET_LIMITS addresses some small limits that were causing issues. Details can
# be found here: https://api.rocket.rs/v0.5/rocket/data/struct.Limits

ROCKET_LIMITS='{String=2000000,string=2000000}'

# ROCKET_DATABASES is used by rocket_sync_db_pools to set up database connections for
# the Rocket app. The target here should match DATABASE_URL

ROCKET_DATABASES='{enigmatick={url="postgres://username:password@dbhost/dbname",pool_size=5}}'

# DATABASE_URL is used by in non-Rocket contexts (e.g., when operating the CLI tool).

DATABASE_URL='postgres://username:password@dbhost/dbname'

# SERVER_NAME is used throughout the code-base to build links to content within the
# Enigmatick application.

SERVER_NAME=enigmatick.example.com

# SYSTEM_USER is a dedicated ActivityPub user to facilitate programmatic retrieval of
# content from servers that require an Actor's signature (like Enigmatick).

SYSTEM_USER=system

# MEDIA_DIR is where assets like avatars, uploads, banners, and cached files are stored.

MEDIA_DIR=./media

# REGISTRATION and INSTANCE variables are used by nodeinfo and to control related
# application functionality (e.g., REGISTRATION_ENABLED=false disables signups).

REGISTRATION_ENABLED=true
REGISTRATION_APPROVAL_REQUIRED=false
REGISTRATION_MESSAGE="service in development"
INSTANCE_CONTACT=email@example.com
INSTANCE_TITLE="Your Awesome Instance"
INSTANCE_VERSION=0.0.1-alpha
INSTANCE_SOURCE_URL=https://gitlab.com/enigmatick
INSTANCE_DESCRIPTION="Enigmatick is an in-development service that will enable strong end-to-end privacy and provide users an open platform to publish both long-form articles and brief status updates."

